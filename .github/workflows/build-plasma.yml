name: Build nightly images (plasma-mobile)
on:
  workflow_dispatch:
  schedule:
    - cron: '0 2 * * 5' # Run every friday at 02:00 UTC

env:
  KERNEL_BRANCH: danila/spacewar-testing
  # Define variables for consistency and maintainability
  KERNEL_PACKAGE: linux-postmarketos-qcom-sc7280
  DEVICE_NAME: nothing-spacewar
  PMBOOTSTRAP_CONFIG: nothing-spacewar.cfg
  KERNEL_CONFIG_FRAGMENT: sm7325.config # Changed to sm7325.config

jobs:
  build-image:
    strategy:
      matrix:
        version: ["default"]

    runs-on: ubuntu-latest
    steps:
      - name: Check out build configurations
        uses: actions/checkout@v4

      - name: Configure git
        run: |
          # Use the identity from your build script
          git config --global user.email "example@example.com"
          git config --global user.name "Nonta72"

      - name: Substitute placeholders in configs
        run: |
          # Matches the placeholder substitution from your build.sh for HOME and NPROC
          find . -type f -name "*.cfg" -exec sed -i "s|HOME|$(echo $HOME)|;s|NPROC|$(nproc)|" {} +

      - name: Install pmbootstrap from git
        run: |
          git clone https://gitlab.postmarketos.org/postmarketOS/pmbootstrap.git --depth 1
          mkdir -p ~/.local/bin
          # Create symlink as in your script (using $PWD for current directory)
          ln -s "$PWD/pmbootstrap/pmbootstrap.py" ~/.local/bin/pmbootstrap
          # Add local bin to path for this step to verify
          export PATH="$PATH:~/.local/bin"
          pmbootstrap --version

      - name: Set up pmaports and Init pmbootstrap
        run: |
          # Run a minimal init to set up the work directory structure. 
          # The '|| true' follows the user's build.sh, anticipating interactive prompts.
          echo -e '\n\n' | pmbootstrap init || true
          
          # EXPLICITLY CLONE pmaports to the expected location. 
          # This guarantees the directory exists and fixes the "No such file or directory" error.
          git clone https://gitlab.postmarketos.org/postmarketOS/pmaports.git \
            ~/.local/var/pmbootstrap/cache_git/pmaports --depth 1

          # Now change directory to perform git manipulation
          cd ~/.local/var/pmbootstrap/cache_git/pmaports
          
          # Perform the git setup exactly as in the user's build.sh
          git remote add sc7280 https://github.com/mainlining/pmaports.git
          DEFAULT_BRANCH=danila/spacewar-mr
          git fetch sc7280 $DEFAULT_BRANCH
          git reset --hard sc7280/$DEFAULT_BRANCH

      - name: Clone kernel sources
        run: |
          # Clones the specific branch used in your build.sh
          git clone https://github.com/mainlining/linux.git --single-branch --branch ${{ env.KERNEL_BRANCH }} --depth 1

      - name: Prepare Device Configs
        run: |
          # Copy the device config to the pmbootstrap config location for v3 (build) and v2 (install)
          cp ${{ env.PMBOOTSTRAP_CONFIG }} ~/.config/pmbootstrap_v3.cfg
          cp ${{ env.PMBOOTSTRAP_CONFIG }} ~/.config/pmbootstrap.cfg
          
          # Copy the kernel config fragment into the linux source tree for 'make defconfig'
          cp ${{ env.KERNEL_CONFIG_FRAGMENT }} linux/arch/arm64/configs/${{ env.KERNEL_CONFIG_FRAGMENT }}

      - name: Compile and Package Kernel with envkernel
        run: |
          cd linux
          shopt -s expand_aliases
          # Source envkernel.sh using the relative path from the 'linux' directory
          source ../pmbootstrap/helpers/envkernel.sh
          
          # --- Kernel Configuration (Mirroring build.sh logic) ---
          # Use 'make defconfig' with the copied fragment name
          make defconfig ${{ env.KERNEL_CONFIG_FRAGMENT }}
          
          # 2. Compile the kernel binaries
          make -j$(nproc)
          
          # 3. Use pmbootstrap to package the compiled kernel artifacts
          pmbootstrap build --envkernel ${{ env.KERNEL_PACKAGE }}

      - name: Create artifact directory
        run: |
          mkdir out

      - name: Build and Export postmarketOS image
        run: |
          # Use pmbootstrap install to build the rootfs
          pmbootstrap install --password 1114
          pmbootstrap export
          
          # Define paths using environment variables for clarity
          BOOT_IMG=/tmp/postmarketOS-export/boot.img
          ROOTFS_IMG=/tmp/postmarketOS-export/${{ env.DEVICE_NAME }}.img
          OUT_DIR=$PWD/out
          
          # Copy and compress artifacts using tar/xz as per your build.sh
          cp $BOOT_IMG $OUT_DIR/boot-${{ env.DEVICE_NAME }}.img
          cp $ROOTFS_IMG $OUT_DIR/rootfs-${{ env.DEVICE_NAME }}.img
          
          # Create the final compressed tarball using xz compression
          tar -c -I 'xz -9 -T0' -f $OUT_DIR/Spacewar_pmos.tar.xz $OUT_DIR/rootfs-${{ env.DEVICE_NAME }}.img $OUT_DIR/boot-${{ env.DEVICE_NAME }}.img
          
          # Clean up pmbootstrap's state
          echo -e "n\nn\ny\n" | pmbootstrap zap

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.DEVICE_NAME }}-plasma
          path: out/*
          retention-days: 7
