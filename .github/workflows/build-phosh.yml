name: Build weekly images (phosh)
on:
  # --- FIX: Added push trigger to run on code changes ---
  push:
    branches: [main, master]
  # -----------------------------------------------------
  workflow_dispatch:
  schedule:
    - cron: '0 1 * * 5' # Run every friday at midnight

env:
  # Define variables for consistency and maintainability
  KERNEL_BRANCH: danila/spacewar-testing
  KERNEL_PACKAGE: linux-postmarketos-qcom-sc7280
  DEVICE_NAME: nothing-spacewar
  
  # === CRITICAL: Refactored PMOS Path Variables ===
  # NOTE: PMOS_DEVICE_PATH removed from here to fix YAML error. 
  # It will be calculated in the run step below.
  PMOS_VENDOR: nothing
  PMOS_CODENAME: spacewar 
  # ===============================================
  
  PMBOOTSTRAP_CONFIG: nothing-spacewar-phosh.cfg
  KERNEL_CONFIG_FRAGMENT: sm7325.config
  # CRITICAL: Define the target partition label for the stowaway method
  PMOS_ROOT_PARTITION: pmos_data

jobs:
  build-image:
    runs-on: ubuntu-latest
    steps:
      - name: Check out build configurations
        uses: actions/checkout@v4

      - name: Configure git
        run: |
          git config --global user.email "example@example.com"
          git config --global user.name "neonmodder123"

      - name: Substitute placeholders in configs
        run: |
          find . -type f -name "*.cfg" -exec sed -i "s|HOME|$(echo $HOME)|;s|NPROC|$(nproc)|" {} +

      - name: Install pmbootstrap from git
        run: |
          git clone https://gitlab.postmarketos.org/postmarketOS/pmbootstrap.git --depth 1
          mkdir -p ~/.local/bin
          ln -s "$PWD/pmbootstrap/pmbootstrap.py" ~/.local/bin/pmbootstrap
          pmbootstrap --version

      - name: Set up pmaports
        run: |
          echo -e '\n\n' | pmbootstrap init || true
          cd ~/.local/var/pmbootstrap/cache_git/pmaports
          git remote add sc7280 https://github.com/mainlining/pmaports.git
          DEFAULT_BRANCH=danila/spacewar-mr
          git fetch sc7280 $DEFAULT_BRANCH
          git reset --hard sc7280/$DEFAULT_BRANCH

      # =================================================================
      # --- CRITICAL: PMOS COMMAND LINE PATCH (Stowaway Fix) ---
      # Path is calculated here using shell interpolation.
      # =================================================================
      - name: Patch PMOS to use Stowaway/Custom Root
        run: |
          PMAPORTS_DIR=~/.local/var/pmbootstrap/cache_git/pmaports
          
          # FIX: Calculate the full path using shell variables (correct syntax)
          PMOS_DEVICE_PATH="device/${{ env.PMOS_VENDOR }}/${{ env.PMOS_CODENAME }}"
          DEVICEINFO_PATH="$PMAPORTS_DIR/$PMOS_DEVICE_PATH/deviceinfo"

          if [ ! -f "$DEVICEINFO_PATH" ]; then
              echo "Error: deviceinfo file not found at expected path: $DEVICEINFO_PATH"
              echo "The directory $PMAPORTS_DIR/$PMOS_DEVICE_PATH must exist."
              ls -R $PMAPORTS_DIR/device || true
              exit 1
          fi

          # Append the crucial stowaway command line arguments
          echo "deviceinfo_kernel_cmdline_append=\"pmos.stowaway pmos_root=/dev/disk/by-partlabel/${{ env.PMOS_ROOT_PARTITION }}\"" >> "$DEVICEINFO_PATH"
          echo "Successfully patched deviceinfo for stowaway boot from ${{ env.PMOS_ROOT_PARTITION }}."
      # =================================================================

      - name: Clone kernel sources
        run: |
          git clone https://github.com/mainlining/linux.git --single-branch --branch ${{ env.KERNEL_BRANCH }} --depth 1

      - name: Prepare Device Configs
        run: |
          cp ${{ env.PMBOOTSTRAP_CONFIG }} ~/.config/pmbootstrap_v3.cfg
          cp ${{ env.PMBOOTSTRAP_CONFIG }} ~/.config/pmbootstrap.cfg
          
          # Copy the kernel config fragment into the linux source tree
          cp ${{ env.KERNEL_CONFIG_FRAGMENT }} linux/arch/arm64/configs/${{ env.KERNEL_CONFIG_FRAGMENT }}

      - name: Choose device in pmbootstrap
        run: |
          cp nothing-spacewar-phosh.cfg ~/.config/pmbootstrap_v3.cfg

      - name: Compile and Package Kernel with envkernel
        run: |
          cd linux
          shopt -s expand_aliases
          source ../pmbootstrap/helpers/envkernel.sh
          
          # 1. Generate the initial configuration
          make defconfig ${{ env.KERNEL_CONFIG_FRAGMENT }}
          
          # =================================================================
          # --- CRITICAL KERNEL PATCH INJECTION (Memory Fix) ---
          # This is mandatory for the kernel to load on the Nothing Phone 1.
          # =================================================================
          echo "CONFIG_PHYS_OFFSET=0x0000000080000000" >> .config
          echo "Injected CONFIG_PHYS_OFFSET patch into kernel .config"
          
          # 2. Compile the kernel binaries
          make -j$(nproc)
          
          # 3. Use pmbootstrap to package the compiled kernel artifacts
          pmbootstrap build --envkernel ${{ env.KERNEL_PACKAGE }}

      - name: Create artifact directory
        run: |
          mkdir out

      - name: Update package indices
        run: |
          echo "Updating package indices to ensure all dependencies are resolved."
          pmbootstrap update

      - name: Build and Export postmarketOS image
        run: |
          # Use pmbootstrap install to build the rootfs
          pmbootstrap install --password 1114
          pmbootstrap export
          
          # Define paths using environment variables for clarity
          BOOT_IMG=/tmp/postmarketOS-export/boot.img
          ROOTFS_IMG=/tmp/postmarketOS-export/${{ env.DEVICE_NAME }}.img
          OUT_DIR=$PWD/out
          
          # Copy and compress artifacts
          cp $BOOT_IMG $OUT_DIR/boot-${{ env.DEVICE_NAME }}.img
          cp $ROOTFS_IMG $OUT_DIR/rootfs-${{ env.DEVICE_NAME }}.img
          
          # Create the final compressed tarball using xz compression
          tar -c -I 'xz -9 -T0' -f $OUT_DIR/Spacewar_pmos.tar.xz $OUT_DIR/rootfs-${{ env.DEVICE_NAME }}.img $OUT_DIR/boot-${{ env.DEVICE_NAME }}.img

          ls -al out
          
          # Clean up pmbootstrap's state
          echo -e "n\nn\ny\n" | pmbootstrap zap

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.DEVICE_NAME }}-phosh
          path: out/*
          retention-days: 7
